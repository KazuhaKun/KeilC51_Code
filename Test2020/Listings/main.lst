C51 COMPILER V9.54   MAIN                                                                  10/11/2025 00:32:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay.h"
   3          #include "Key.h"
   4          #include "Nixie.h"
   5          #include "Motor.h"
   6          #include "IR.h"
   7          #include "LCD1602.h"
   8          #include "Buzzer.h"
   9          #include <STDIO.H>
  10          #include "DS1302.h"
  11          #include "string.h"
  12          #include "DS18B20.h"
  13          #include "AT24C02.h"
  14          #include "Timer0.h"
  15          #include "Timer1.h"
  16          
  17          /*PD*/
  18          #define LINE_MAX_LENGTH 20
  19          /*PD End*/
  20          /*PV*/
  21          
  22          unsigned char Time_5s_Count = 0;    // 用于5秒温度任务
  23          unsigned char Time_60s_Count = 0;   // 用于60秒掉电存储（可选）
  24          
  25          bit Flag_1s_Task = 0;       // 1秒任务（DS1302读取、LCD刷新）
  26          bit Flag_5s_Task = 0;       // 5秒任务（DS18B20开始转换）
  27          bit Flag_750ms_Ready = 0;   // DS18B20 750ms 转换完成标志
  28          bit Flag_60s_Task = 0;      // 60秒任务（AT24C02备份）
  29          
  30          // DS18B20 状态机
  31          char Temp_State = 0; // 0: Idle, 1: Convert Started, 2: Read Value
  32          
  33          typedef enum {
  34            Calendar,
  35            Safe,
  36            Calculator
  37          } Mode;
  38          Mode mode=Calendar;
  39          
  40          
  41          
  42          unsigned char IR_Cmd=0;
  43          
  44          xdata char Init_Time[]={19,12,31,23,59,0,2};  //初始时间
  45          // char Time[7];
  46          xdata char L1_String[LINE_MAX_LENGTH]="";
  47          xdata char L2_String[LINE_MAX_LENGTH]="";
  48          
  49          /*PV End*/
  50          
  51          /*Module Code*/
  52          void IR_Data_Proc(void)
  53          {
  54   1        if (IR_GetDataFlag()){IR_Cmd=IR_GetCommand();}
C51 COMPILER V9.54   MAIN                                                                  10/11/2025 00:32:10 PAGE 2   

  55   1      }
  56          void Mode_Change(void){
  57   1        if (IR_Cmd == IR_MODE){
  58   2          mode = (Mode)((mode + 1) % 3);
  59   2          IR_Cmd = 0;
  60   2        }else if (IR_Cmd == IR_POWER){
  61   2          mode = Calendar;  //重置
  62   2          IR_Cmd = 0;
  63   2        }
  64   1      }
  65          void Calendar_Init(void){
  66   1        //DS18B20 因为初始化需要一定时间，前置到主函数循环第一项
  67   1        DS1302_Init();
  68   1        memcpy(DS1302_Time,Init_Time,sizeof(Init_Time));
  69   1        DS1302_SetTime();
  70   1      }
  71          void Calendar_Disp(void){
  72   1      
  73   1        sprintf(L1_String,"20%02d-%02d-%02d",DS1302_Time[0],DS1302_Time[1],DS1302_Time[2]);
  74   1        sprintf(L2_String,"%02d:%02d:%02d",DS1302_Time[3],DS1302_Time[4],DS1302_Time[5]);
  75   1        LCD_ShowString(1,1,L1_String);
  76   1        LCD_ShowString(2,1,L2_String);
  77   1      }
  78          
  79          void Calendar_Set(void){
  80   1        
  81   1      }
  82          
  83          
  84          /*Module Code End*/
  85          
  86          /*Proc Code*/
  87          // DS18B20 状态机处理函数 (非阻塞)
  88          void Temp_Proc(void){
  89   1          if (mode != Calendar) return;
  90   1      
  91   1          if (Temp_State == 0) { // Idle 状态
  92   2              if (Flag_5s_Task) {
  93   3                  // 开始温度转换，不阻塞
  94   3                  DS18B20_ConvertT(); // 假设这个函数只是发送启动命令
  95   3                  Flag_5s_Task = 0;
  96   3                  Temp_State = 1; // 进入转换中状态
  97   3              }
  98   2          } else if (Temp_State == 1) { // 转换中状态
  99   2              if (Flag_750ms_Ready) {
 100   3                  // 750ms 等待完成，读取温度
 101   3                  DS18B20_ReadT(); // 假设你的 DS18B20.c 中有一个读取函数
 102   3                  
 103   3                  // TODO: 在这里格式化并显示温度值
 104   3                  // sprintf(L2_String + 9, " T:%2.2f", DS18B20_Temperature);
 105   3                  // LCD_ShowString(2, 1, L2_String);
 106   3                  
 107   3                  Flag_750ms_Ready = 0;
 108   3                  Temp_State = 0; // 回到 Idle 状态
 109   3              }
 110   2          }
 111   1      }
 112          
 113          void Calendar_Proc(void){
 114   1        bit Cal_Mode = 0; //0:Display, 1:Set
 115   1        if (mode != Calendar) {return;}
 116   1          
C51 COMPILER V9.54   MAIN                                                                  10/11/2025 00:32:10 PAGE 3   

 117   1        // 1. 模式切换处理 (保持不变)
 118   1        if (IR_Cmd == IR_START_STOP){
 119   2          Cal_Mode = !Cal_Mode;
 120   2          IR_Cmd = 0;
 121   2              // 如果进入设置模式，可以清除 LCD
 122   2        }
 123   1          
 124   1        // 2. 周期性任务处理
 125   1          if (Cal_Mode) {
 126   2          Calendar_Set();
 127   2        }else {
 128   2              // 1秒任务：时间读取和显示
 129   2              if (Flag_1s_Task) {
 130   3                  DS1302_ReadTime(); // 从DS1302读取时间
 131   3                  Calendar_Disp();
 132   3                  Flag_1s_Task = 0;
 133   3              }
 134   2              
 135   2              // 5秒任务：温度转换和读取 (通过 Temp_Proc 状态机处理)
 136   2              Temp_Proc();
 137   2              
 138   2              // 60秒任务：掉电存储备份
 139   2              if (Flag_60s_Task) {
 140   3                  // AT24C02_WriteTime(); // 将时间写入EEPROM
 141   3                  Flag_60s_Task = 0;
 142   3              }
 143   2        }
 144   1      }
 145          
 146          void Safe_Proc(void){
 147   1        if (mode != Safe) {return;} 
 148   1      }
 149          
 150          void Calculator_Proc(void){
 151   1        if (mode != Calculator) {return;}
 152   1      }
 153          /*Proc Code End*/
 154          
 155          void main()
 156          {
 157   1        // DS18B20_ConvertT();
 158   1        // Delay(750);
 159   1        LCD_Init();
 160   1        Calendar_Init();
 161   1        IR_Init();
 162   1        Motor_Init();
 163   1        while(1)
 164   1        {
 165   2          IR_Data_Proc();
 166   2          Mode_Change();
 167   2      
 168   2          Calendar_Proc();
 169   2          Safe_Proc();
 170   2          Calculator_Proc();
 171   2        }
 172   1      }
 173          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    258    ----
   CONSTANT SIZE    =     32    ----
C51 COMPILER V9.54   MAIN                                                                  10/11/2025 00:32:10 PAGE 4   

   XDATA SIZE       =     47    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
