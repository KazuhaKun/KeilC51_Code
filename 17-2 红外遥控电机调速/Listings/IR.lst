C51 COMPILER V9.54   IR                                                                    12/11/2024 21:27:17 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.lst
                    -) TABS(2) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Timer0.h"
   3          #include "Int0.h"
   4          
   5          unsigned int IR_Time;
   6          unsigned char IR_State;
   7          
   8          unsigned char IR_Data[4];
   9          unsigned char IR_pData;
  10          
  11          unsigned char IR_DataFlag;
  12          unsigned char IR_RepeatFlag;
  13          unsigned char IR_Address;
  14          unsigned char IR_Command;
  15          
  16          void IR_Init(void)
  17          {
  18   1        Timer0_Init();
  19   1        Int0_Init();
  20   1      }
  21          
  22          unsigned char IR_GetDataFlag(void)
  23          {
  24   1        if(IR_DataFlag)
  25   1        {
  26   2          IR_DataFlag = 0;
  27   2          return 1;
  28   2        }
  29   1        return 0;
  30   1      }
  31          
  32          unsigned char IR_GetRepeatFlag(void)
  33          {
  34   1        if(IR_RepeatFlag)
  35   1        {
  36   2          IR_RepeatFlag = 0;
  37   2          return 1;
  38   2        }
  39   1        return 0;
  40   1      }
  41          
  42          unsigned char IR_GetAddress(void)
  43          {
  44   1        return IR_Address;
  45   1      }
  46          
  47          unsigned char IR_GetCommand(void)
  48          {
  49   1        return IR_Command;
  50   1      }
  51          
  52          void Int0_Routine() interrupt 0
  53          {
  54   1          switch(IR_State)
C51 COMPILER V9.54   IR                                                                    12/11/2024 21:27:17 PAGE 2   

  55   1        {
  56   2          case 0:
  57   2          {
  58   3            Timer0_SetCounter(0);
  59   3            Timer0_Run(1);
  60   3            IR_State = 1;
  61   3            break;
  62   3          }
  63   2          case 1:
  64   2          {
  65   3            IR_Time = Timer0_GetCounter();
  66   3            Timer0_SetCounter(0);
  67   3            if(IR_Time > 12442-500 & IR_Time < 12442+500)
  68   3            {
  69   4              IR_State = 2;
  70   4            }
  71   3            else if(IR_Time > 10368-500 & IR_Time < 10368+500)
  72   3            {
  73   4              IR_RepeatFlag = 1;
  74   4              Timer0_Run(0);
  75   4              IR_State = 0;
  76   4            }
  77   3            else
  78   3            {
  79   4              IR_State = 1;
  80   4            }     
  81   3            break;
  82   3          }
  83   2          case 2:
  84   2          {
  85   3            IR_Time = Timer0_GetCounter();
  86   3            Timer0_SetCounter(0);
  87   3            if(IR_Time > 1032-500 & IR_Time < 1032+500)
  88   3            {
  89   4              IR_Data[IR_pData/8] &=~(0x01<<(IR_pData%8));
  90   4              IR_pData++;
  91   4      
  92   4            }
  93   3            else if(IR_Time > 2074-500 & IR_Time < 2074+500)
  94   3            {
  95   4              IR_Data[IR_pData/8] |=(0x01<<(IR_pData%8));
  96   4              IR_pData++;
  97   4            }
  98   3            else
  99   3            {
 100   4              IR_pData = 0;
 101   4              IR_State = 1;
 102   4            }
 103   3            if(IR_pData >= 32)
 104   3            {
 105   4              IR_pData = 0;
 106   4              if((IR_Data[0] == ~IR_Data[1]) && (IR_Data[2] == ~IR_Data[3]))
 107   4              {
 108   5                IR_Address = IR_Data[0];
 109   5                IR_Command = IR_Data[2];
 110   5                IR_DataFlag = 1;
 111   5              }
 112   4              Timer0_Run(0);
 113   4              IR_State = 0;
 114   4            }
 115   3            break;
 116   3          }
C51 COMPILER V9.54   IR                                                                    12/11/2024 21:27:17 PAGE 3   

 117   2          
 118   2        }
 119   1        
 120   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    438    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
